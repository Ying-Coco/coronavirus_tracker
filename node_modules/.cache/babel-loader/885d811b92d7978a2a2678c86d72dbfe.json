{"ast":null,"code":"var _jsxFileName = \"/Users/cwen13/Desktop/coronavirus_tracker/src/mapsrc/App.js\";\nimport React, { useRef, useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport useSWR from 'swr';\nimport lookup from 'country-code-lookup';\nimport './App.scss'; // Need mapbox css for tooltips later in the tutorial\n\nimport 'mapbox-gl/dist/mapbox-gl.css'; //mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\nmapboxgl.accessToken = \"pk.eyJ1IjoiZG9uZmVuZzk3IiwiYSI6ImNrYTI1aHQ3YjAybmQzaG1zejI2NzF4anEifQ.9fU6UDHJGcBegmFnDwkrSA\";\n\nfunction App2() {\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  const fetcher = url => fetch(url).then(r => r.json()).then(data => data.map((point, index) => ({\n    type: 'Feature',\n    geometry: {\n      type: 'Point',\n      coordinates: [point.coordinates.longitude, point.coordinates.latitude]\n    },\n    properties: {\n      id: index,\n      country: point.country,\n      province: point.province,\n      cases: point.stats.confirmed,\n      deaths: point.stats.deaths\n    }\n  })));\n\n  const {\n    data\n  } = useSWR('https://corona.lmao.ninja/v2/jhucsse', fetcher); // Initialize our map\n\n  useEffect(() => {\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: 'mapbox://styles/notalemesa/ck8dqwdum09ju1ioj65e3ql3k',\n        center: [16, 27],\n        zoom: 2\n      }); // Add navigation controls to the top right of the canvas\n\n      map.addControl(new mapboxgl.NavigationControl());\n      map.once('load', function () {\n        // Add our SOURCE\n        map.addSource('points', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: data\n          }\n        }); // Add our layer\n\n        map.addLayer({\n          id: 'circles',\n          source: 'points',\n          // this should be the id of source\n          type: 'circle',\n          paint: {\n            'circle-opacity': 0.75,\n            'circle-stroke-width': ['interpolate', ['linear'], ['get', 'cases'], 1, 1, 100000, 1.75],\n            'circle-radius': ['interpolate', ['linear'], ['get', 'cases'], 1, 4, 1000, 8, 4000, 10, 8000, 14, 12000, 18, 100000, 40],\n            'circle-color': ['interpolate', ['linear'], ['get', 'cases'], 1, '#ffffb2', 5000, '#fed976', 10000, '#feb24c', 25000, '#fd8d3c', 50000, '#fc4e2a', 75000, '#e31a1c', 100000, '#b10026']\n          }\n        });\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n        let lastId;\n        map.on('mousemove', 'circles', e => {\n          const id = e.features[0].properties.id;\n\n          if (id !== lastId) {\n            var _lookup$byCountry, _lookup$byInternet;\n\n            lastId = id;\n            const {\n              cases,\n              deaths,\n              country,\n              province\n            } = e.features[0].properties; // Change the pointer type on mouseenter\n\n            map.getCanvas().style.cursor = 'pointer';\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            const countryISO = ((_lookup$byCountry = lookup.byCountry(country)) === null || _lookup$byCountry === void 0 ? void 0 : _lookup$byCountry.iso2) || ((_lookup$byInternet = lookup.byInternet(country)) === null || _lookup$byInternet === void 0 ? void 0 : _lookup$byInternet.iso2);\n            const provinceHTML = province !== 'null' ? `<p>Province: <b>${province}</b></p>` : '';\n            const mortalityRate = (deaths / cases * 100).toFixed(2);\n            const countryFlagHTML = Boolean(countryISO) ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>` : '';\n            const HTML = `<p>Country: <b>${country}</b></p>\n              ${provinceHTML}\n              <p>Cases: <b>${cases}</b></p>\n              <p>Deaths: <b>${deaths}</b></p>\n              <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n              ${countryFlagHTML}`; // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\n          }\n        });\n        map.on('mouseleave', 'circles', function () {\n          lastId = undefined;\n          map.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n      });\n    }\n  }, [data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapBox\",\n    ref: mapboxElRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"source\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"computer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDDA5\\uFE0F\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/alemesa/mapbox-covid19\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, \"Source code\")));\n}\n\nexport default App2;","map":{"version":3,"sources":["/Users/cwen13/Desktop/coronavirus_tracker/src/mapsrc/App.js"],"names":["React","useRef","useEffect","mapboxgl","useSWR","lookup","accessToken","App2","mapboxElRef","fetcher","url","fetch","then","r","json","data","map","point","index","type","geometry","coordinates","longitude","latitude","properties","id","country","province","cases","stats","confirmed","deaths","Map","container","current","style","center","zoom","addControl","NavigationControl","once","addSource","features","addLayer","source","paint","popup","Popup","closeButton","closeOnClick","lastId","on","e","getCanvas","cursor","slice","countryISO","byCountry","iso2","byInternet","provinceHTML","mortalityRate","toFixed","countryFlagHTML","Boolean","HTML","Math","abs","lngLat","lng","setLngLat","setHTML","addTo","undefined","remove"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport useSWR from 'swr';\nimport lookup from 'country-code-lookup';\nimport './App.scss';\n// Need mapbox css for tooltips later in the tutorial\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n//mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\nmapboxgl.accessToken = \"pk.eyJ1IjoiZG9uZmVuZzk3IiwiYSI6ImNrYTI1aHQ3YjAybmQzaG1zejI2NzF4anEifQ.9fU6UDHJGcBegmFnDwkrSA\";\n\nfunction App2() {\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  const fetcher = (url) =>\n    fetch(url)\n      .then((r) => r.json())\n      .then((data) =>\n        data.map((point, index) => ({\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [point.coordinates.longitude, point.coordinates.latitude]\n          },\n          properties: {\n            id: index,\n            country: point.country,\n            province: point.province,\n            cases: point.stats.confirmed,\n            deaths: point.stats.deaths\n          }\n        }))\n      );\n\n  const { data } = useSWR('https://corona.lmao.ninja/v2/jhucsse', fetcher);\n\n  // Initialize our map\n  useEffect(() => {\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: 'mapbox://styles/notalemesa/ck8dqwdum09ju1ioj65e3ql3k',\n        center: [16, 27],\n        zoom: 2\n      });\n\n      // Add navigation controls to the top right of the canvas\n      map.addControl(new mapboxgl.NavigationControl());\n\n      map.once('load', function () {\n        // Add our SOURCE\n        map.addSource('points', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: data\n          }\n        });\n\n        // Add our layer\n        map.addLayer({\n          id: 'circles',\n          source: 'points', // this should be the id of source\n          type: 'circle',\n          paint: {\n            'circle-opacity': 0.75,\n            'circle-stroke-width': ['interpolate', ['linear'], ['get', 'cases'], 1, 1, 100000, 1.75],\n            'circle-radius': [\n              'interpolate',\n              ['linear'],\n              ['get', 'cases'],\n              1,\n              4,\n              1000,\n              8,\n              4000,\n              10,\n              8000,\n              14,\n              12000,\n              18,\n              100000,\n              40\n            ],\n            'circle-color': [\n              'interpolate',\n              ['linear'],\n              ['get', 'cases'],\n              1,\n              '#ffffb2',\n              5000,\n              '#fed976',\n              10000,\n              '#feb24c',\n              25000,\n              '#fd8d3c',\n              50000,\n              '#fc4e2a',\n              75000,\n              '#e31a1c',\n              100000,\n              '#b10026'\n            ]\n          }\n        });\n\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n\n        let lastId;\n\n        map.on('mousemove', 'circles', (e) => {\n          const id = e.features[0].properties.id;\n\n          if (id !== lastId) {\n            lastId = id;\n            const { cases, deaths, country, province } = e.features[0].properties;\n\n            // Change the pointer type on mouseenter\n            map.getCanvas().style.cursor = 'pointer';\n\n            const coordinates = e.features[0].geometry.coordinates.slice();\n\n            const countryISO = lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\n            const provinceHTML = province !== 'null' ? `<p>Province: <b>${province}</b></p>` : '';\n            const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n            const countryFlagHTML = Boolean(countryISO)\n              ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>`\n              : '';\n\n            const HTML = `<p>Country: <b>${country}</b></p>\n              ${provinceHTML}\n              <p>Cases: <b>${cases}</b></p>\n              <p>Deaths: <b>${deaths}</b></p>\n              <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n              ${countryFlagHTML}`;\n\n            // Ensure that if the map is zoomed out such that multiple\n            // copies of the feature are visible, the popup appears\n            // over the copy being pointed to.\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n            }\n\n            popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\n          }\n        });\n\n        map.on('mouseleave', 'circles', function () {\n          lastId = undefined;\n          map.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n      });\n    }\n  }, [data]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"mapContainer\" >\n        {/* Mapbox container */}\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n      {/* Source container - not part of the tutorial */}\n      <div className=\"source\">\n        <span role=\"img\" aria-label=\"computer\">\n          🖥️\n        </span>\n        <a href=\"https://github.com/alemesa/mapbox-covid19\" target=\"_blank\" rel=\"noreferrer noopener\">\n          Source code\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App2;\n"]},"metadata":{},"sourceType":"module"}